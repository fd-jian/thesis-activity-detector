debug: true

custom:
  kafka:
    broker: kafka:29092
    topics:
      separator: ""
      names:
        activities: activities
        sensor-data: linear_acceleration
        sensor-data-rounded: linear_acceleration-rounded

# Native Encoding enables the kafka serialization/deserialization
spring.cloud.stream.default.producer:
  useNativeEncoding: true

spring.cloud.stream.default.consumer:
  useNativeEncoding: true

# Configure the kafka streams binder to consume messages
spring.cloud.stream.kafka.streams.binder:
  brokers: ${custom.kafka.broker}
  configuration:
#    default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    default.key.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
#    default.key.serde: org.springframework.kafka.support.serializer.JsonSerde
    default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
    schema.registry.url: http://schema-registry:8081
#    default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#    default.value.serde: com.edutec.activitydetector.AccelerometerSerde
#    default.value.serde: org.springframework.kafka.support.serializer.JsonSerde
    cache.max.bytes.buffering: 0

spring.cloud.stream.bindings.input.contentType: application/*+avro
spring.cloud.stream.bindings.input.consumer.useNativeDecoding: true
spring.cloud.stream.bindings.output.producer.useNativeEncoding: true

# Configure the bindings
spring.cloud.stream.bindings:
  sensor-data:
    destination: ${custom.kafka.topics.names.sensor-data}
  activities:
    destination: ${custom.kafka.topics.names.activities}
  sensor-data2:
    destination: ${custom.kafka.topics.names.sensor-data}
  sensor-data-rounded:
    destination: ${custom.kafka.topics.names.sensor-data-rounded}

spring.cloud.stream.kafka.streams.bindings:
  sensor-data:
    consumer.application-id: activity-detector-sensor-data
